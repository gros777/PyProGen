#!/bin/bash

########################################
#           FUNCTIONS                  #
########################################

fill_setup_file(){
	# setup.py file content
	local project_name=$1
	read -r -d '' setup_file_content <<- EOF
	try:
	    from setuptools import setup
	except ImportError:
	    from distutils.core import setup
	
	config = {
	    'description': 'About the project',
	    'author': 'Author name',
	    'url': 'project url.',
	    'download_url': 'Where to get the project',
	    'author_email': 'Contact mail.',
	    'version': '0.1',
	    'install_requires': ['nose'],
	    'packages': ['$project_name'],
	    'scripts': [],
	    'name': '$project_name'
	}
	
	setup(**config)
	EOF
	echo "$setup_file_content" > setup.py
}

fill_test_file(){
	# project_test.py file content
	local project_name=$1
	local test_file=tests/$2

	read -r -d '' test_file_content <<- EOF
	from nose.tools import *
	import $project_name

	def setup():
	    print ("SETUP!")

	def teardown():
	    print ("TEAR DOWN!")

	def test_basic():
	    print ("I RAN!")
	EOF
	echo "$test_file_content" > $test_file
}

allready_exist(){
	local type=$1
	local name=$2

	if [ $type ==  $FILE ]
	then
		echo "The file $name allready exists, omitted"
	else
		echo "The directory $name allready exists, omitted"
	fi
}

create_files(){
	
	local new_dir_name=$1;
	# creating the python init files
	cd $new_dir_name
	local init_file=__init__.py

	# main module init
	if [ ! -f $new_dir_name/$init_file ]
	then
		touch $new_dir_name/$init_file 
	else
		allready_exist $FILE $new_dir_name/$init_file
	fi
	
	# test init file
	if [ ! -f tests/$init_file ]
	then
		touch tests/$init_file
	else
		allready_exist $FILE $init_file
	fi
	
	# generating the setup.py file for the project
	local setup_file=setup.py
	if [ ! -f $setup_file ]
	then
		touch $setup_file
		fill_setup_file $new_dir_name
	else
		echo "The file setup.py file allready existe, omited"
	fi
	
	# generating a test file for the project
	local test_file=$(echo "$new_dir_name"_tests.py)
	
	if [ ! -f tests/$test_file ]
	then
		touch tests/$test_file
		fill_test_file $new_dir_name $test_file
	else
		allready_exist $FILE $test_file
	fi

	cd ..
}

create_dir_structure(){
	
	local new_dir_name=$1;
	# creating the main project directory and directory structure
	if [ ! -d $new_dir_name ]
	then	
		mkdir -p $new_dir_name/{$new_dir_name,bin,docs,tests}
	else
		allready_exist $DIR $new_dir_name
		
		cd $new_dir_name
		if [ ! -d $new_dir_name ]; then
			mkdir $new_dir_name
		else
			allready_exist $DIR $new_dir_name
		fi

		if [ ! -d bin ]; then
			mkdir bin
		else
			allready_exist $DIR "bin"
		fi

		if [ ! -d docs ]; then
			mkdir docs
		else
			allready_exist $DIR "docs"
		fi

		if [ ! -d tests ]; then
			mkdir tests
		else
			allready_exist $DIR "tests"
		fi

		cd ..	
	fi
	
}

usage(){
	cat <<- EOF
	Creates a new skeleton for your python project
	Version: $VERSION
	Usage: $SCRIPT_NAME project_name
	EOF
}

########################################
#                MAIN                  #
########################################
main(){
	# testing the parameters, if none print usage and exit with error
	if [ $PAR_NUM -eq 0 ]; then
		usage
		exit 1
	fi

	local project_name=${ARGS[0]}
	create_dir_structure $project_name
	create_files $project_name
	echo "generated structure"
	tree $project_name
	cd $project_name
	echo "testing the project with nosetests"
	nosetests
}

readonly VERSION=1.0
readonly SCRIPT_NAME="pyprogen"
readonly PAR_NUM=$#
readonly ARGS=("$@")
readonly DIR="D"
readonly FILE="F"
main
